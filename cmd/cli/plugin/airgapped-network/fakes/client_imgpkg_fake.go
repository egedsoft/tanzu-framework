// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/tanzu-framework/cmd/cli/plugin/airgapped-network/cmd"
)

type ImgPkgClientFake struct {
	ImgpkgCopyImageFromTarStub        func(string, string, string) error
	imgpkgCopyImageFromTarMutex       sync.RWMutex
	imgpkgCopyImageFromTarArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	imgpkgCopyImageFromTarReturns struct {
		result1 error
	}
	imgpkgCopyImageFromTarReturnsOnCall map[int]struct {
		result1 error
	}
	ImgpkgCopyToTarStub        func(string, string) error
	imgpkgCopyToTarMutex       sync.RWMutex
	imgpkgCopyToTarArgsForCall []struct {
		arg1 string
		arg2 string
	}
	imgpkgCopyToTarReturns struct {
		result1 error
	}
	imgpkgCopyToTarReturnsOnCall map[int]struct {
		result1 error
	}
	ImgpkgPullImageStub        func(string, string) error
	imgpkgPullImageMutex       sync.RWMutex
	imgpkgPullImageArgsForCall []struct {
		arg1 string
		arg2 string
	}
	imgpkgPullImageReturns struct {
		result1 error
	}
	imgpkgPullImageReturnsOnCall map[int]struct {
		result1 error
	}
	ImgpkgTagListImageStub        func(string) []string
	imgpkgTagListImageMutex       sync.RWMutex
	imgpkgTagListImageArgsForCall []struct {
		arg1 string
	}
	imgpkgTagListImageReturns struct {
		result1 []string
	}
	imgpkgTagListImageReturnsOnCall map[int]struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ImgPkgClientFake) ImgpkgCopyImageFromTar(arg1 string, arg2 string, arg3 string) error {
	fake.imgpkgCopyImageFromTarMutex.Lock()
	ret, specificReturn := fake.imgpkgCopyImageFromTarReturnsOnCall[len(fake.imgpkgCopyImageFromTarArgsForCall)]
	fake.imgpkgCopyImageFromTarArgsForCall = append(fake.imgpkgCopyImageFromTarArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ImgpkgCopyImageFromTarStub
	fakeReturns := fake.imgpkgCopyImageFromTarReturns
	fake.recordInvocation("ImgpkgCopyImageFromTar", []interface{}{arg1, arg2, arg3})
	fake.imgpkgCopyImageFromTarMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ImgPkgClientFake) ImgpkgCopyImageFromTarCallCount() int {
	fake.imgpkgCopyImageFromTarMutex.RLock()
	defer fake.imgpkgCopyImageFromTarMutex.RUnlock()
	return len(fake.imgpkgCopyImageFromTarArgsForCall)
}

func (fake *ImgPkgClientFake) ImgpkgCopyImageFromTarCalls(stub func(string, string, string) error) {
	fake.imgpkgCopyImageFromTarMutex.Lock()
	defer fake.imgpkgCopyImageFromTarMutex.Unlock()
	fake.ImgpkgCopyImageFromTarStub = stub
}

func (fake *ImgPkgClientFake) ImgpkgCopyImageFromTarArgsForCall(i int) (string, string, string) {
	fake.imgpkgCopyImageFromTarMutex.RLock()
	defer fake.imgpkgCopyImageFromTarMutex.RUnlock()
	argsForCall := fake.imgpkgCopyImageFromTarArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ImgPkgClientFake) ImgpkgCopyImageFromTarReturns(result1 error) {
	fake.imgpkgCopyImageFromTarMutex.Lock()
	defer fake.imgpkgCopyImageFromTarMutex.Unlock()
	fake.ImgpkgCopyImageFromTarStub = nil
	fake.imgpkgCopyImageFromTarReturns = struct {
		result1 error
	}{result1}
}

func (fake *ImgPkgClientFake) ImgpkgCopyImageFromTarReturnsOnCall(i int, result1 error) {
	fake.imgpkgCopyImageFromTarMutex.Lock()
	defer fake.imgpkgCopyImageFromTarMutex.Unlock()
	fake.ImgpkgCopyImageFromTarStub = nil
	if fake.imgpkgCopyImageFromTarReturnsOnCall == nil {
		fake.imgpkgCopyImageFromTarReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.imgpkgCopyImageFromTarReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ImgPkgClientFake) ImgpkgCopyToTar(arg1 string, arg2 string) error {
	fake.imgpkgCopyToTarMutex.Lock()
	ret, specificReturn := fake.imgpkgCopyToTarReturnsOnCall[len(fake.imgpkgCopyToTarArgsForCall)]
	fake.imgpkgCopyToTarArgsForCall = append(fake.imgpkgCopyToTarArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.ImgpkgCopyToTarStub
	fakeReturns := fake.imgpkgCopyToTarReturns
	fake.recordInvocation("ImgpkgCopyToTar", []interface{}{arg1, arg2})
	fake.imgpkgCopyToTarMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ImgPkgClientFake) ImgpkgCopyToTarCallCount() int {
	fake.imgpkgCopyToTarMutex.RLock()
	defer fake.imgpkgCopyToTarMutex.RUnlock()
	return len(fake.imgpkgCopyToTarArgsForCall)
}

func (fake *ImgPkgClientFake) ImgpkgCopyToTarCalls(stub func(string, string) error) {
	fake.imgpkgCopyToTarMutex.Lock()
	defer fake.imgpkgCopyToTarMutex.Unlock()
	fake.ImgpkgCopyToTarStub = stub
}

func (fake *ImgPkgClientFake) ImgpkgCopyToTarArgsForCall(i int) (string, string) {
	fake.imgpkgCopyToTarMutex.RLock()
	defer fake.imgpkgCopyToTarMutex.RUnlock()
	argsForCall := fake.imgpkgCopyToTarArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ImgPkgClientFake) ImgpkgCopyToTarReturns(result1 error) {
	fake.imgpkgCopyToTarMutex.Lock()
	defer fake.imgpkgCopyToTarMutex.Unlock()
	fake.ImgpkgCopyToTarStub = nil
	fake.imgpkgCopyToTarReturns = struct {
		result1 error
	}{result1}
}

func (fake *ImgPkgClientFake) ImgpkgCopyToTarReturnsOnCall(i int, result1 error) {
	fake.imgpkgCopyToTarMutex.Lock()
	defer fake.imgpkgCopyToTarMutex.Unlock()
	fake.ImgpkgCopyToTarStub = nil
	if fake.imgpkgCopyToTarReturnsOnCall == nil {
		fake.imgpkgCopyToTarReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.imgpkgCopyToTarReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ImgPkgClientFake) ImgpkgPullImage(arg1 string, arg2 string) error {
	fake.imgpkgPullImageMutex.Lock()
	ret, specificReturn := fake.imgpkgPullImageReturnsOnCall[len(fake.imgpkgPullImageArgsForCall)]
	fake.imgpkgPullImageArgsForCall = append(fake.imgpkgPullImageArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.ImgpkgPullImageStub
	fakeReturns := fake.imgpkgPullImageReturns
	fake.recordInvocation("ImgpkgPullImage", []interface{}{arg1, arg2})
	fake.imgpkgPullImageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ImgPkgClientFake) ImgpkgPullImageCallCount() int {
	fake.imgpkgPullImageMutex.RLock()
	defer fake.imgpkgPullImageMutex.RUnlock()
	return len(fake.imgpkgPullImageArgsForCall)
}

func (fake *ImgPkgClientFake) ImgpkgPullImageCalls(stub func(string, string) error) {
	fake.imgpkgPullImageMutex.Lock()
	defer fake.imgpkgPullImageMutex.Unlock()
	fake.ImgpkgPullImageStub = stub
}

func (fake *ImgPkgClientFake) ImgpkgPullImageArgsForCall(i int) (string, string) {
	fake.imgpkgPullImageMutex.RLock()
	defer fake.imgpkgPullImageMutex.RUnlock()
	argsForCall := fake.imgpkgPullImageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ImgPkgClientFake) ImgpkgPullImageReturns(result1 error) {
	fake.imgpkgPullImageMutex.Lock()
	defer fake.imgpkgPullImageMutex.Unlock()
	fake.ImgpkgPullImageStub = nil
	fake.imgpkgPullImageReturns = struct {
		result1 error
	}{result1}
}

func (fake *ImgPkgClientFake) ImgpkgPullImageReturnsOnCall(i int, result1 error) {
	fake.imgpkgPullImageMutex.Lock()
	defer fake.imgpkgPullImageMutex.Unlock()
	fake.ImgpkgPullImageStub = nil
	if fake.imgpkgPullImageReturnsOnCall == nil {
		fake.imgpkgPullImageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.imgpkgPullImageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ImgPkgClientFake) ImgpkgTagListImage(arg1 string) []string {
	fake.imgpkgTagListImageMutex.Lock()
	ret, specificReturn := fake.imgpkgTagListImageReturnsOnCall[len(fake.imgpkgTagListImageArgsForCall)]
	fake.imgpkgTagListImageArgsForCall = append(fake.imgpkgTagListImageArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ImgpkgTagListImageStub
	fakeReturns := fake.imgpkgTagListImageReturns
	fake.recordInvocation("ImgpkgTagListImage", []interface{}{arg1})
	fake.imgpkgTagListImageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ImgPkgClientFake) ImgpkgTagListImageCallCount() int {
	fake.imgpkgTagListImageMutex.RLock()
	defer fake.imgpkgTagListImageMutex.RUnlock()
	return len(fake.imgpkgTagListImageArgsForCall)
}

func (fake *ImgPkgClientFake) ImgpkgTagListImageCalls(stub func(string) []string) {
	fake.imgpkgTagListImageMutex.Lock()
	defer fake.imgpkgTagListImageMutex.Unlock()
	fake.ImgpkgTagListImageStub = stub
}

func (fake *ImgPkgClientFake) ImgpkgTagListImageArgsForCall(i int) string {
	fake.imgpkgTagListImageMutex.RLock()
	defer fake.imgpkgTagListImageMutex.RUnlock()
	argsForCall := fake.imgpkgTagListImageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ImgPkgClientFake) ImgpkgTagListImageReturns(result1 []string) {
	fake.imgpkgTagListImageMutex.Lock()
	defer fake.imgpkgTagListImageMutex.Unlock()
	fake.ImgpkgTagListImageStub = nil
	fake.imgpkgTagListImageReturns = struct {
		result1 []string
	}{result1}
}

func (fake *ImgPkgClientFake) ImgpkgTagListImageReturnsOnCall(i int, result1 []string) {
	fake.imgpkgTagListImageMutex.Lock()
	defer fake.imgpkgTagListImageMutex.Unlock()
	fake.ImgpkgTagListImageStub = nil
	if fake.imgpkgTagListImageReturnsOnCall == nil {
		fake.imgpkgTagListImageReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.imgpkgTagListImageReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *ImgPkgClientFake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.imgpkgCopyImageFromTarMutex.RLock()
	defer fake.imgpkgCopyImageFromTarMutex.RUnlock()
	fake.imgpkgCopyToTarMutex.RLock()
	defer fake.imgpkgCopyToTarMutex.RUnlock()
	fake.imgpkgPullImageMutex.RLock()
	defer fake.imgpkgPullImageMutex.RUnlock()
	fake.imgpkgTagListImageMutex.RLock()
	defer fake.imgpkgTagListImageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ImgPkgClientFake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cmd.ImgPkgClient = new(ImgPkgClientFake)
